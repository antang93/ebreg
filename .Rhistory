o <- -x * (log(b) + a * log(p)) + log(x <= n)
if(!log) o <- exp(o)
return(o)
}
n=100
p=200
r=0.5
signal=1
beta <- c(0,0,rep(signal,2),rep(0,10),signal,rep(0,6),signal,0,0,signal)
beta.index <- c(3,4,15,22,25)
sig2 <- 1
d <- 1
log.f <- function(x) dcomplex(x, n, p, 0.05, 1)
s0 <- length(beta.index)
g <- function(i, j) r**(abs(i - j))
R <- outer(1:p, 1:p, g)
e <- eigen(R)
sqR <- e$vectors %*% diag(sqrt(e$values)) %*% t(e$vectors)
X <- matrix(rnorm(n * p), nrow=n, ncol=p) %*% sqR
X.new <- matrix(rnorm(p), nrow=1, ncol=p) %*% sqR
y <- as.numeric(X[, beta.index] %*% beta[beta.index]) + sqrt(sig2) * rnorm(n)
y.new <- as.numeric(X.new[,beta.index] %*% beta[beta.index]) + sqrt(sig2) * rnorm(1)
o1 <- ebreg(y, X, X.new, alpha=.99, gam=.005, NULL, FALSE, igpar=c(0.01, 4), log.f, M=5000, sample.beta=TRUE)
expect_that( is.null(o1$yy), is_true())
o1$yy
o1$Yhat
o1$PI
n=100
p=200
r=0.5
signal=1
beta <- c(0,0,rep(signal,2),rep(0,10),signal,rep(0,6),signal,0,0,signal)
beta.index <- c(3,4,15,22,25)
sig2 <- 1
d <- 1
log.f <- function(x) dcomplex(x, n, p, 0.05, 1)
s0 <- length(beta.index)
g <- function(i, j) r**(abs(i - j))
R <- outer(1:p, 1:p, g)
e <- eigen(R)
sqR <- e$vectors %*% diag(sqrt(e$values)) %*% t(e$vectors)
X <- matrix(rnorm(n * p), nrow=n, ncol=p) %*% sqR
X.new <- matrix(rnorm(p), nrow=1, ncol=p) %*% sqR
y <- as.numeric(X[, beta.index] %*% beta[beta.index]) + sqrt(sig2) * rnorm(n)
y.new <- as.numeric(X.new[,beta.index] %*% beta[beta.index]) + sqrt(sig2) * rnorm(1)
o1 <- ebreg(y, X, X.new, alpha=.99, gam=.005, NULL, FALSE, igpar=c(0.01, 4), log.f, M=5000, pred=TRUE)
o1$beta
o1$beta.post
o1$CI
n=100
p=200
r=0.5
signal=1
beta <- c(0,0,rep(signal,2),rep(0,10),signal,rep(0,6),signal,0,0,signal)
beta.index <- c(3,4,15,22,25)
sig2 <- 1
d <- 1
log.f <- function(x) dcomplex(x, n, p, 0.05, 1)
s0 <- length(beta.index)
g <- function(i, j) r**(abs(i - j))
R <- outer(1:p, 1:p, g)
e <- eigen(R)
sqR <- e$vectors %*% diag(sqrt(e$values)) %*% t(e$vectors)
X <- matrix(rnorm(n * p), nrow=n, ncol=p) %*% sqR
X.new <- matrix(rnorm(p), nrow=1, ncol=p) %*% sqR
y <- as.numeric(X[, beta.index] %*% beta[beta.index]) + sqrt(sig2) * rnorm(n)
y.new <- as.numeric(X.new[,beta.index] %*% beta[beta.index]) + sqrt(sig2) * rnorm(1)
o1 <- ebreg(y, X, X.new, alpha=.99, gam=.005, NULL, TRUE, igpar=c(0.01, 4), log.f, M=5000, pred=TRUE)
o1$sig2
n=100
p=200
r=0.5
M=5000
signal=1
beta <- c(0,0,rep(signal,2),rep(0,10),signal,rep(0,6),signal,0,0,signal)
beta.index <- c(3,4,15,22,25)
sig2 <- 1
d <- 1
log.f <- function(x) dcomplex(x, n, p, 0.05, 1)
s0 <- length(beta.index)
g <- function(i, j) r**(abs(i - j))
R <- outer(1:p, 1:p, g)
e <- eigen(R)
sqR <- e$vectors %*% diag(sqrt(e$values)) %*% t(e$vectors)
X <- matrix(rnorm(n * p), nrow=n, ncol=p) %*% sqR
X.new <- matrix(rnorm(p), nrow=1, ncol=p) %*% sqR
y <- as.numeric(X[, beta.index] %*% beta[beta.index]) + sqrt(sig2) * rnorm(n)
y.new <- as.numeric(X.new[,beta.index] %*% beta[beta.index]) + sqrt(sig2) * rnorm(1)
o1 <- ebreg(y, X, X.new, alpha=.99, gam=.005, NULL, TRUE, igpar=c(0.01, 4), log.f, M=M, pred=TRUE, sample.beta=TRUE)
str(o1$beta)
p
M
str(o1$beta.post)
p
library(ebreg)
dcomplex <- function(x, n, p, a, b, log=TRUE) {
o <- -x * (log(b) + a * log(p)) + log(x <= n)
if(!log) o <- exp(o)
return(o)
}
n=100
p=200
r=0.5
signal=1
beta <- c(0,0,rep(signal,2),rep(0,10),signal,rep(0,6),signal,0,0,signal)
beta.index <- c(3,4,15,22,25)
sig2 <- 1
d <- 1
log.f <- function(x) dcomplex(x, n, p, 0.05, 1)
s0 <- length(beta.index)
g <- function(i, j) r**(abs(i - j))
R <- outer(1:p, 1:p, g)
e <- eigen(R)
sqR <- e$vectors %*% diag(sqrt(e$values)) %*% t(e$vectors)
X <- matrix(rnorm(n * p), nrow=n, ncol=p) %*% sqR
X.new <- matrix(rnorm(p), nrow=1, ncol=p) %*% sqR
y <- as.numeric(X[, beta.index] %*% beta[beta.index]) + sqrt(sig2) * rnorm(n)
y.new <- as.numeric(X.new[,beta.index] %*% beta[beta.index]) + sqrt(sig2) * rnorm(1)
o1 <- ebreg(y, X, X.new, alpha=.99, gam=.005, NULL, FALSE, igpar=c(0.01, 4), log.f, M=5000, sample.beta=TRUE)
o1$yy
o1$Yhat
o1$PI
n=100
p=200
r=0.5
signal=1
beta <- c(0,0,rep(signal,2),rep(0,10),signal,rep(0,6),signal,0,0,signal)
beta.index <- c(3,4,15,22,25)
sig2 <- 1
d <- 1
log.f <- function(x) dcomplex(x, n, p, 0.05, 1)
s0 <- length(beta.index)
g <- function(i, j) r**(abs(i - j))
R <- outer(1:p, 1:p, g)
e <- eigen(R)
sqR <- e$vectors %*% diag(sqrt(e$values)) %*% t(e$vectors)
X <- matrix(rnorm(n * p), nrow=n, ncol=p) %*% sqR
X.new <- matrix(rnorm(p), nrow=1, ncol=p) %*% sqR
y <- as.numeric(X[, beta.index] %*% beta[beta.index]) + sqrt(sig2) * rnorm(n)
y.new <- as.numeric(X.new[,beta.index] %*% beta[beta.index]) + sqrt(sig2) * rnorm(1)
o1 <- ebreg(y, X, X.new, alpha=.99, gam=.005, NULL, FALSE, igpar=c(0.01, 4), log.f, M=5000, pred=TRUE)
o1$beta
o1$beta.post
o1$CI
n=100
p=200
r=0.5
signal=1
beta <- c(0,0,rep(signal,2),rep(0,10),signal,rep(0,6),signal,0,0,signal)
beta.index <- c(3,4,15,22,25)
sig2 <- 1
d <- 1
log.f <- function(x) dcomplex(x, n, p, 0.05, 1)
s0 <- length(beta.index)
g <- function(i, j) r**(abs(i - j))
R <- outer(1:p, 1:p, g)
e <- eigen(R)
sqR <- e$vectors %*% diag(sqrt(e$values)) %*% t(e$vectors)
X <- matrix(rnorm(n * p), nrow=n, ncol=p) %*% sqR
X.new <- matrix(rnorm(p), nrow=1, ncol=p) %*% sqR
y <- as.numeric(X[, beta.index] %*% beta[beta.index]) + sqrt(sig2) * rnorm(n)
y.new <- as.numeric(X.new[,beta.index] %*% beta[beta.index]) + sqrt(sig2) * rnorm(1)
o1 <- ebreg(y, X, X.new, alpha=.99, gam=.005, NULL, TRUE, igpar=c(0.01, 4), log.f, M=5000, pred=TRUE)
o1$sig2
n=100
p=200
r=0.5
M=5000
signal=1
beta <- c(0,0,rep(signal,2),rep(0,10),signal,rep(0,6),signal,0,0,signal)
beta.index <- c(3,4,15,22,25)
sig2 <- 1
d <- 1
log.f <- function(x) dcomplex(x, n, p, 0.05, 1)
s0 <- length(beta.index)
g <- function(i, j) r**(abs(i - j))
R <- outer(1:p, 1:p, g)
e <- eigen(R)
sqR <- e$vectors %*% diag(sqrt(e$values)) %*% t(e$vectors)
X <- matrix(rnorm(n * p), nrow=n, ncol=p) %*% sqR
X.new <- matrix(rnorm(p), nrow=1, ncol=p) %*% sqR
y <- as.numeric(X[, beta.index] %*% beta[beta.index]) + sqrt(sig2) * rnorm(n)
y.new <- as.numeric(X.new[,beta.index] %*% beta[beta.index]) + sqrt(sig2) * rnorm(1)
o1 <- ebreg(y, X, X.new, alpha=.99, gam=.005, NULL, TRUE, igpar=c(0.01, 4), log.f, M=M, pred=TRUE, sample.beta=TRUE)
str(o1$beta)
str(o1$beta.post)
o1$beta.post
use_readme_rmd()
install.packages('devtools')
use_readme_rmd()
library(devtools)
use_readme_rmd()
library(ebreg)
show_news
show_news()
news()
devtools::release()
devtools::release()
library(ebreg)
devtools::release()
devtools::release('ebreg')
devtools::release(ebreg)
devtools::release(pkg='.')
devtools::release(pkg='ebreg')
library(ebreg)
setwd('../')
devtools::release(pkg='ebreg')
devtools::release(pkg='.')
devtools::release(pkg='ebreg/ebreg.Rproj')
devtools::release(pkg='ebreg')
devtools::release(pkg='/ebreg')
devtools::release(pkg='ebreg/')
setwd('ebreg/')
devtools::release()
setwd('R/')
devtools::release()
devtools::release(pkg='.')
devtools::release(pkg='ebreg')
devtools::release(pkg='../')
package_file
package_file()
load('devtools')
library(devtools)
devtools::release(pkg='.')
package_file()
devtools::release()
release()
setwd('../')
release()
reload()
reload('.')
release()
load(devtools)
load('devtools')
install.Rtools
install.Rtools()
library(ebreg)
dcomplex <- function(x, n, p, a, b, log=TRUE) {
o <- -x * (log(b) + a * log(p)) + log(x <= n)
if(!log) o <- exp(o)
return(o)
}
n=100
p=200
r=0.5
signal=1
beta <- c(0,0,rep(signal,2),rep(0,10),signal,rep(0,6),signal,0,0,signal)
beta.index <- c(3,4,15,22,25)
sig2 <- 1
d <- 1
log.f <- function(x) dcomplex(x, n, p, 0.05, 1)
s0 <- length(beta.index)
g <- function(i, j) r**(abs(i - j))
R <- outer(1:p, 1:p, g)
e <- eigen(R)
sqR <- e$vectors %*% diag(sqrt(e$values)) %*% t(e$vectors)
X <- matrix(rnorm(n * p), nrow=n, ncol=p) %*% sqR
X.new <- matrix(rnorm(p), nrow=1, ncol=p) %*% sqR
y <- as.numeric(X[, beta.index] %*% beta[beta.index]) + sqrt(sig2) * rnorm(n)
y.new <- as.numeric(X.new[,beta.index] %*% beta[beta.index]) + sqrt(sig2) * rnorm(1)
o1 <- ebreg(y, X, X.new, alpha=.99, gam=.005, NULL, FALSE, igpar=c(0.01, 4), log.f, M=5000, sample.beta=TRUE)
o1$yy
o1$Yhat
o1$PI
o1$beta
o1$beta.post
o1 <- ebreg(y, X, X.new, alpha=.99, gam=.005, NULL, FALSE, igpar=c(0.01, 4), log.f, M=5000, pred=TRUE)
o1$yy
str(o1$yy)
x<-c(1+0i,2+4i)
x
x<-c(T,F)
x
x<-c(True,FALSE)
x<-c(TRUE,FALSE)
x
1==1
pnorm(2)
1-pnorm(2)
.02275013*1000
library(invgamma)
rgamma(1, shape=1, scale=1)
1/rgamma(1, shape=1, scale=1)
1/18.34523
1/rgamma(1, shape=1, scale=1)
1/rgamma(1, shape=1, scale=1)
1/rgamma(1, shape=1, scale=1)
rinvgamma(1,shape=1,rate=1)
rinvgamma(1,shape=1,rate=1)
rinvgamma(1,shape=1,rate=1)
rinvgamma(1,shape=1,rate=1)
rinvgamma(1,shape=1,rate=1)
rinvgamma(1,shape=1,rate=1)
library(ebreg)
library(ebreg)
library(ebreg)
library(ebreg)
library(ebreg)
dcomplex <- function(x, n, p, a, b, log=TRUE) {
o <- -x * (log(b) + a * log(p)) + log(x <= n)
if(!log) o <- exp(o)
return(o)
}
n=100
p=200
r=0.5
signal=1
beta <- c(0,0,rep(signal,2),rep(0,10),signal,rep(0,6),signal,0,0,signal)
beta.index <- c(3,4,15,22,25)
sig2 <- 1
d <- 1
log.f <- function(x) dcomplex(x, n, p, 0.05, 1)
s0 <- length(beta.index)
g <- function(i, j) r**(abs(i - j))
R <- outer(1:p, 1:p, g)
e <- eigen(R)
sqR <- e$vectors %*% diag(sqrt(e$values)) %*% t(e$vectors)
X <- matrix(rnorm(n * p), nrow=n, ncol=p) %*% sqR
X.new <- matrix(rnorm(p), nrow=1, ncol=p) %*% sqR
y <- as.numeric(X[, beta.index] %*% beta[beta.index]) + sqrt(sig2) * rnorm(n)
y.new <- as.numeric(X.new[,beta.index] %*% beta[beta.index]) + sqrt(sig2) * rnorm(1)
o1 <- ebreg(y, X, X.new, alpha=.99, gam=.005, NULL, FALSE, igpar=c(0.01, 4), log.f, M=5000, sample.beta=TRUE)
library(ebreg)
n=100
p=200
r=0.5
signal=1
beta <- c(0,0,rep(signal,2),rep(0,10),signal,rep(0,6),signal,0,0,signal)
beta.index <- c(3,4,15,22,25)
sig2 <- 1
d <- 1
log.f <- function(x) dcomplex(x, n, p, 0.05, 1)
s0 <- length(beta.index)
g <- function(i, j) r**(abs(i - j))
R <- outer(1:p, 1:p, g)
e <- eigen(R)
sqR <- e$vectors %*% diag(sqrt(e$values)) %*% t(e$vectors)
X <- matrix(rnorm(n * p), nrow=n, ncol=p) %*% sqR
X.new <- matrix(rnorm(p), nrow=1, ncol=p) %*% sqR
y <- as.numeric(X[, beta.index] %*% beta[beta.index]) + sqrt(sig2) * rnorm(n)
y.new <- as.numeric(X.new[,beta.index] %*% beta[beta.index]) + sqrt(sig2) * rnorm(1)
o1 <- ebreg(y, X, X.new, alpha=.99, gam=.005, NULL, FALSE, igpar=c(0.01, 4), log.f, M=5000, sample.beta=TRUE)
expect_that( is.null(o1$ynew), is_true())
o1$ynew
o1$ynew.mean
o1$PI
o1$beta.mean
n=100
p=200
r=0.5
signal=1
beta <- c(0,0,rep(signal,2),rep(0,10),signal,rep(0,6),signal,0,0,signal)
beta.index <- c(3,4,15,22,25)
sig2 <- 1
d <- 1
log.f <- function(x) dcomplex(x, n, p, 0.05, 1)
s0 <- length(beta.index)
g <- function(i, j) r**(abs(i - j))
R <- outer(1:p, 1:p, g)
e <- eigen(R)
sqR <- e$vectors %*% diag(sqrt(e$values)) %*% t(e$vectors)
X <- matrix(rnorm(n * p), nrow=n, ncol=p) %*% sqR
X.new <- matrix(rnorm(p), nrow=1, ncol=p) %*% sqR
y <- as.numeric(X[, beta.index] %*% beta[beta.index]) + sqrt(sig2) * rnorm(n)
y.new <- as.numeric(X.new[,beta.index] %*% beta[beta.index]) + sqrt(sig2) * rnorm(1)
o1 <- ebreg(y, X, X.new, alpha=.99, gam=.005, NULL, FALSE, igpar=c(0.01, 4), log.f, M=5000, pred=TRUE)
o1$beta
o1$beta.mean
o1$CI
n=100
p=200
r=0.5
signal=1
beta <- c(0,0,rep(signal,2),rep(0,10),signal,rep(0,6),signal,0,0,signal)
beta.index <- c(3,4,15,22,25)
sig2 <- 1
d <- 1
log.f <- function(x) dcomplex(x, n, p, 0.05, 1)
s0 <- length(beta.index)
g <- function(i, j) r**(abs(i - j))
R <- outer(1:p, 1:p, g)
e <- eigen(R)
sqR <- e$vectors %*% diag(sqrt(e$values)) %*% t(e$vectors)
X <- matrix(rnorm(n * p), nrow=n, ncol=p) %*% sqR
X.new <- matrix(rnorm(p), nrow=1, ncol=p) %*% sqR
y <- as.numeric(X[, beta.index] %*% beta[beta.index]) + sqrt(sig2) * rnorm(n)
y.new <- as.numeric(X.new[,beta.index] %*% beta[beta.index]) + sqrt(sig2) * rnorm(1)
o1 <- ebreg(y, X, X.new, alpha=.99, gam=.005, NULL, TRUE, igpar=c(0.01, 4), log.f, M=5000, pred=TRUE)
o1$sig2
n=100
p=200
r=0.5
M=5000
signal=1
beta <- c(0,0,rep(signal,2),rep(0,10),signal,rep(0,6),signal,0,0,signal)
beta.index <- c(3,4,15,22,25)
sig2 <- 1
d <- 1
log.f <- function(x) dcomplex(x, n, p, 0.05, 1)
s0 <- length(beta.index)
g <- function(i, j) r**(abs(i - j))
R <- outer(1:p, 1:p, g)
e <- eigen(R)
sqR <- e$vectors %*% diag(sqrt(e$values)) %*% t(e$vectors)
X <- matrix(rnorm(n * p), nrow=n, ncol=p) %*% sqR
X.new <- matrix(rnorm(p), nrow=1, ncol=p) %*% sqR
y <- as.numeric(X[, beta.index] %*% beta[beta.index]) + sqrt(sig2) * rnorm(n)
y.new <- as.numeric(X.new[,beta.index] %*% beta[beta.index]) + sqrt(sig2) * rnorm(1)
o1 <- ebreg(y, X, X.new, alpha=.99, gam=.005, NULL, TRUE, igpar=c(0.01, 4), log.f, M=M, pred=TRUE, sample.beta=TRUE)
o1$beta
str(o1$beta)
o1$beta.mean
str(o1$beta.mean)
n=70
p=100
beta=rep(1,5)
beta
s0=length(beta)
sig2=1
d=1
log.f <- function(x) -x * (log(1) + 0.05 * log(p)) + log(x <= n)
X <- matrix(rnorm(n * p), nrow=n, ncol=p)
X.new <- matrix(rnorm(p), nrow=1, ncol=p)
y <- as.numeric(X[, 1:s0] %*% beta[1:s0]) + sqrt(sig2) * rnorm(n)
ebreg(y, X, X.new, alpha=.99, gam=.005, NULL, FALSE, igpar=c(0.01, 4), log.f, M=5000, TRUE, FALSE, .95)
o <- ebreg(y, X, X.new, alpha=.99, gam=.005, NULL, FALSE, igpar=c(0.01, 4), log.f, M=5000, TRUE, FALSE, .95)
incl.pr <- o$incl.prob
op <- par(pty="m", mfrow=c(2,1), mar=c(4.2, 4.2, 1, 1))
sz <- sort(unique(o$s))
pr <- as.numeric(table(o$s)) / M
op <- par(pty="m", mfrow=c(2,1), mar=c(4.2, 4.2, 1, 1))
plot(sz, pr, type="h", xlab="Model Size", ylab="Probability", ylim=c(0,1))
abline(v=s0, lty=3)
plot(incl.pr, xlab="Variable Index", ylab="Inclusion Probability", type="h", ylim=c(0,1))
par(op)
op <- par(pty="m", mfrow=c(1,1), mar=c(4.2, 4.2, 1, 1))
plot(sz, pr, type="h", xlab="Model Size", ylab="Probability", ylim=c(0,1))
abline(v=s0, lty=3)
plot(incl.pr, xlab="Variable Index", ylab="Inclusion Probability", type="h", ylim=c(0,1))
par(op)
sz <- sort(unique(o$s))
pr <- as.numeric(table(o$s)) / M
incl.pr <- o$incl.prob
op <- par(pty="m", mfrow=c(1,1), mar=c(4.2, 4.2, 1, 1))
plot(sz, pr, type="h", xlab="Model Size", ylab="Probability", ylim=c(0,1))
abline(v=s0, lty=3)
incl.pr <- o$incl.prob
plot(incl.pr, xlab="Variable Index", ylab="Inclusion Probability", type="h", ylim=c(0,1))
par(op)
op <- par(pty="m", mfrow=c(1,1), mar=c(4.2, 4.2, 1, 1))
incl.pr <- o$incl.prob
plot(incl.pr, xlab="Variable Index", ylab="Inclusion Probability", type="h", ylim=c(0,1))
par(mfrow=c(1,1))
par(mfrow=c(1,2))
incl.pr <- o$incl.prob
plot(incl.pr, xlab="Variable Index", ylab="Inclusion Probability", type="h", ylim=c(0,1))
par(mfrow=c(1,1))
plot(incl.pr, xlab="Variable Index", ylab="Inclusion Probability", type="h", ylim=c(0,1))
roxygen2::roxygenise()
library(ebreg)
roxygenise()
roxygen2::roxygenize()
roxygen2::roxygenize()
warnings()
roxygen2::roxygenize()
library(ebreg)
library(ebreg)
library(ebreg)
roxygen2::roxygenize()
library(ebreg)
n=100
p=200
r=0.5
signal=1
beta <- c(0,0,rep(signal,2),rep(0,10),signal,rep(0,6),signal,0,0,signal)
beta.index <- c(3,4,15,22,25)
sig2 <- 1
d <- 1
log.f <- function(x) dcomplex(x, n, p, 0.05, 1)
s0 <- length(beta.index)
g <- function(i, j) r**(abs(i - j))
R <- outer(1:p, 1:p, g)
e <- eigen(R)
sqR <- e$vectors %*% diag(sqrt(e$values)) %*% t(e$vectors)
X <- matrix(rnorm(n * p), nrow=n, ncol=p) %*% sqR
X.new <- matrix(rnorm(p), nrow=1, ncol=p) %*% sqR
y <- as.numeric(X[, beta.index] %*% beta[beta.index]) + sqrt(sig2) * rnorm(n)
y.new <- as.numeric(X.new[,beta.index] %*% beta[beta.index]) + sqrt(sig2) * rnorm(1)
o1 <- ebreg(y, X, X.new, alpha=.99, gam=.005, NULL, FALSE, igpar=c(0.01, 4), log.f, M=5000, sample.beta=TRUE)
log.f <- function(x) -x * (log(1) + 0.05 * log(p)) + log(x <= n)
o<-ebreg(y, X, X.new, .99, .005, NULL, FALSE, igpar=c(0.01, 4), log.f, M=5000, TRUE, FALSE, .95)
roxygen2::roxygenise()
devtools::release()
help("devtools-deprecated")
devtools::release()
help("devtools-deprecated")
help('Deprecated')
roxygen2::roxygenise()
library(ebreg)
R CMD Rd2pdf mypackag
build_manual(path=getwd())
library(devtools)
build_manual(path=getwd())
roxygen2::roxygenise()
library(ebreg)
devtools::release()
build_manual(path=getwd())
library(ebreg)
R CMD check --as-cran
R CMD check --as-cran
library(devtools)
check()
